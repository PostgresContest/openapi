openapi: 3.0.1

info:
  title: API for PostgresContest
  version: 1.0.0
  description: This declaration contains all API methods for PostgresContest Project

paths:
  /auth/login:
    post:
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/AuthLoginRequest'
      responses:
        200:
          $ref: '#/components/responses/LoginResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /auth/verify:
    get:
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/OkResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /user:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - User
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /task:
    post:
      security:
        - bearerAdminAuth: [ ]
      tags:
        - Task
      requestBody:
        $ref: '#/components/requestBodies/TaskCreateRequest'
      responses:
        200:
          $ref: '#/components/responses/TaskCreateResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /attempt/{attempt_id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Task
      parameters:
        - name: attempt_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          $ref: '#/components/responses/AttemptResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /tasks:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Task
      responses:
        200:
          $ref: '#/components/responses/TasksResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /task/{task_id}/attempts:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Task
      responses:
        200:
          $ref: '#/components/responses/AttemptsResponse'
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
            format: int64

  /task/{task_id}/attempt:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Task
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/AttemptCreateRequest'
      responses:
        200:
          $ref: '#/components/responses/AttemptResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'


components:
  schemas:
    Error:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
        message:
          type: string

    Jwt:
      type: object
      required: [ access_token,exp,role ]
      properties:
        access_token:
          type: string
        exp:
          type: string
          format: date-time
        role:
          type: string
          example: user

    User:
      type: object
      required: [ id,first_name,last_name,login ]
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        login:
          type: string

    FieldDescription:
      type: object
      properties:
        name:
          type: string
        datatype:
          type: string

    Query:
      type: object
      required: [ id,query_row,query_hash,result_raw,result_hash ]
      properties:
        id:
          type: integer
          format: int64
        query_row:
          type: string
        query_hash:
          type: string
        result_raw:
          type: string
        result_hash:
          type: string
        field_description:
          type: array
          items:
            $ref: "#/components/schemas/FieldDescription"

    Task:
      type: object
      required: [ id, name, description ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        query:
          $ref: '#/components/schemas/Query'
        last_attempt:
          $ref: '#/components/schemas/Attempt'

    Attempt:
      type: object
      required: [ id, accepted ]
      properties:
        id:
          type: integer
          format: int64
        accepted:
          type: boolean
        query:
          $ref: '#/components/schemas/Query'

  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    OkResponse:
      description: Ok response
      content:
        application/json:
          schema:
            type: object
            required: [ status ]
            properties:
              status:
                type: string
                example: ok

    LoginResponse:
      description: Auth login response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Jwt'

    UserResponse:
      description: UserResponse response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    TaskCreateResponse:
      description: Task create response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'


    TasksResponse:
      description: Tasks response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Task'

    AttemptResponse:
      description: Attempt response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attempt'

    AttemptsResponse:
      description: Attempts response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Attempt'

  requestBodies:
    AuthLoginRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ login, password ]
            properties:
              login:
                type: string
              password:
                type: string

    TaskCreateRequest:
      content:
        application/json:
          schema:
            type: object
            required: [ name,description,query_raw ]
            properties:
              name:
                type: string
              description:
                type: string
              query_raw:
                type: string

    AttemptCreateRequest:
      content:
        application/json:
          schema:
            type: object
            required: [ query_raw ]
            properties:
              query_raw:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    bearerAdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
