openapi: 3.0.1

info:
  title: API for PostgresContest
  version: 1.0.0
  description: This declaration contains all API methods for PostgresContest Project

paths:
  /auth/login:
    post:
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        200:
          $ref: '#/components/responses/LoginResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /auth/verify:
    get:
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/OkResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/LoginResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /user:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - user
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /task:
    post:
      security:
        - bearerAdminAuth: [ ]
      tags:
        - Task
      requestBody:
        $ref: '#/components/requestBodies/TaskCreateRequest'
      responses:
        200:
          $ref: '#/components/responses/TaskCreateResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

components:
  schemas:
    Error:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
        message:
          type: string

    Jwt:
      type: object
      required: [ token ]
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        exp:
          type: string
          format: datetime
        role:
          type: string
          example: user

    User:
      type: object
      required: [ id,first_name,last_name,login ]
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        login:
          type: string

    Query:
      type: object
      required: [ id,query_row,query_hash,response_raw,response_hash ]
      properties:
        id:
          type: integer
          format: int64
        query_row:
          type: string
        query_hash:
          type: string
        response_raw:
          type: string
        response_hash:
          type: string

    Task:
      type: object
      required: [ id, name,description ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        query:
          $ref: '#/components/schemas/Query'


  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    OkResponse:
      description: Ok response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok

    LoginResponse:
      description: Auth login response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Jwt'

    UserResponse:
      description: UserResponse response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    TaskCreateResponse:
      description: Task create response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'

  requestBodies:
    LoginRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ login, password ]
            properties:
              login:
                type: string
              password:
                type: string

    TaskCreateRequest:
      content:
        application/json:
          schema:
            type: object
            required: [ name,description,query_raw ]
            properties:
              name:
                type: string
              description:
                type: string
              query_raw:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    bearerAdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
